name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install dependencies
      run: |
        go mod download
        go mod tidy

    - name: 🎨 Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          gofmt -s -l .
          exit 1
        fi

    - name: 🔍 Lint check
      run: |
        go vet ./...
        golangci-lint run --timeout=5m

    - name: 🧪 Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out

    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: 🔨 Build
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: 🔨 Build binary
      run: |
        GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w" -o gin-mcp-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} .

    - name: 📦 Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: gin-mcp-${{ matrix.os }}-${{ matrix.arch }}
        path: gin-mcp-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }}

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 🔍 Run security scan
      run: |
        go list -json -deps . | nancy sleuth

  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: 🔨 Build Docker image
      run: |
        docker build -t gin-mcp:latest .

    - name: 🧪 Test Docker image
      run: |
        docker run --rm gin-mcp:latest --help || true

  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: [test, build, security, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏷️ Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## 🎉 Release v${{ github.run_number }}
          
          ### ✨ What's New
          - Automated release from CI/CD pipeline
          - All tests passing
          - Security scan completed
          
          ### 📦 Downloads
          Check the artifacts for your platform.
          
          ### 🧪 Testing
          - ✅ All tests passing
          - ✅ Security scan clean
          - ✅ Docker build successful
          
          ---
          
          *Built with ❤️ and the pursuit of excellence.*
        draft: false
        prerelease: false

    - name: 📦 Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./gin-mcp-linux-amd64
        asset_name: gin-mcp-linux-amd64
        asset_content_type: application/octet-stream 